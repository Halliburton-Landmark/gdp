		GLOBAL DATAPLANE INTERFACES

This directory contains a very poor prototype of the Global Dataplane
(GDP) with two bindings.  The first is for C, and the second is a
HTTP-based RESTful interface.  The first is used to implement the
second.  All of these are likely to change in the future.


Required Packages:

	libevent2 --- Event handling library available from
		http://libevent.org.  Most systems (Linux, MacOS, and
		FreeBSD at a minumum) have this available as a package.
		On linux you have to install the package libevent-dev.
	libssl-dev --- for the sha256 implementation.
	lighttpd --- Web server for RESTful interface.
		Note: I used macports (http://macports.org) to install
		lighttpd on the Mac, which is probably easier than compiling
		it by hand; in particular, it does the Mac-specific
		configuration for you.
	scgilib --- C binding for Simple Common Gateway Interface: to connect
		lighttpd with GDP; from http://www.xamuel.com/scgilib/;
		a slightly modified version is included with this
		distribution.
	Jansson --- JSON library from http://www.digip.org/jansson/.
		[At this moment this is not being used, but it probably
		will be in the future.]

Directory Structure:
	ep --- A library of C utility functions.  This is a stripped
		down version of a library I wrote several years ago.
		If you look at the code you'll see vestiges of some
		of the stripped out functions.  I plan on cleaning
		this version up and releasing it again.
	gdp --- A library for GDP manipulation.  This is the library
		that applications must link to access the GDP.
	gdpd --- The GDP daemon.  This implements the core of the GDP.
		This implementation is simplistic, working only on
		a single host.
	scgilib --- An updated version of the SCGI code from
		http://www.xamuel.com/scgilib/.  SCGI permits a
		web server to access outside programs by opening
		a socket in a manner much more efficient than basic
		CGI fork/exec.  This is only used for the REST interface.
	apps --- Application programs, including tests.
	doc --- Some documentation, woefully incomplete.

Compiling:
	Should just be a matter of typing "make" in the root.
	Note: gcc on linux has a bug that causes it to complain about
	non-constant expressions in an initializer when the -std=c99
	flag is given.  Those same expressions are constant in Clang
	and even in gcc without the -std=c99 flag.  As a result of
	this problem, we don't use the -std=c99 flag by default, but
	this means that not all features of C99 are available.

	As of this writing, GDP works on MacOS 10.9 (using clang),
	Ubuntu 12.04 (using gcc or clang), and Freebsd 10.0 (using
	clang).  I believe one person has it running on MacOS 10.7
	using gcc.

Running a GDP-based program:
	For anything interesting to happen, an instance of the GDP
	Daemon must be running.  If it is not running, some programs
	will loop trying to connect with it; others will just die
	immediately.

	Located in gdpd/gdpd, it takes these parameters:
	   -D<debug-spec>
		Turn on debugging.  See "Setting Debug Flags" below
		for more information.  Implies -F.
	   -F	Run in foreground.  At the moment, gdpd always runs
		in foreground, but the intent is that it will default
		to background mode without this flag.
	   -P<port>
		Use <port> as the rendezvous port.  Defaults to 2468.
		Can also be set with the "swarm.gdp.controlport"
		parameter.  See "Changing Parameters" below for more
		information.

	You also have to create the directory "/var/tmp/gcl" to store
	the data repository.

Getting Started:
   1.	Install the prerequisites described above.  For the base system
	all you'll need are libevent2-dev and libssl-dev, but the others
	are needed for full functionality. The one line installlation for
	Ubuntu/Linux is:
        sudo apt-get install libevent-dev libssl-dev cgilib lighttpd\
        libjansson-dev

   2.	Compile the code as described above.

   3.	Create the directory /var/tmp/gcl.  This is where the data
	files are kept.  It should be owned by whatever user will be
	running gdpd.  For security reasons, this should NOT be root!!

   4.	Start the GDP daemon (see above).  At this time some callers
	will loop waiting for the daemon to start, but it's always
	best to have it running before trying anything else (not just
	the REST interface).

   5.	Create your first GCL using apps/writer-test.  You can run
	this without arguments and it will create a (random) 256-bit
	name, or with an argument which will be sha-256'd to create
	the internal name.  It will accept text from the input and
	write that text to the GCL.

   6.	Check success by running apps/reader-test giving it the
	internal (256-bit) name printed by writer-test.  If you
	gave writer-test an argument you can use that instead.


Subscriptions:
	You can "subscribe" to a GCL, which will produce an output
	whenever that GCL has a record written to it.  To subscribe,
	use "apps/reader-test -s <name>".


Running the GDP RESTful Interface:
	(In these instructions, <gcl-name> is a URI-base-64-encoded
	string of length 43 characters.  A <recno> is a positive
	non-zero integer.)

   1.	Do the "Getting Started" steps described above.

   2.	The instructions for SCGI configuration for lighttpd are totally
	wrong.  The configuration file you actually need is:

		server.modules += ( "mod_scgi" )

		#scgi.debug = 10
		scgi.server = (
		    "/gdp/v1/" =>
			( "gdp" =>
			    ( "host"  => "127.0.0.1",
			      "port" => 8001,
			      "check-local" => "disable",
			    )
			)
		    )

	(Normally in /usr/local/etc/lighttpd/conf.c/scgi.conf) This will
	tell lighttpd to connect to an SCGI server on the local machine,
	port 8001.  You'll also need to make sure the line
	"include conf.d/scgi.conf" in /usr/local/etc/lighttpd/modules.conf
	is not commented out.  The rest of the lighttpd setup should be
	off the shelf.  I've set up instance of lighttpd to listen on
	port 8080 instead of the default port 80, and the rest of these
	instructions will reflect that.

   3.	Start up the GDP RESTful interface server in apps/gdp-rest.
	It will run in foreground and spit out some debugging
	information.  For even more, use -D\*=20 on the command
	line.  This sets all debug flags to level 20.  The backslash
	is just to keep the Unix shell from trying to glob the
	asterisk.

   4.	Start the lighttpd server, for example using:
	"lighttpd -f /usr/local/etc/lighttpd/lighttpd.conf -D".
	This assumes that your configuration is in
	/usr/local/etc/lighttpd.  The -D says to run in foreground
	and you can skip it if you want.  You may want to turn on
	some debugging inside the daemon to help you understand the
	interactions.  See .../etc/lighttpd/conf.d/debug.conf.

   5.	All of your URIs will start with http://localhost:8080/gdp/v1/gcl,
	so I'll just abbreviate this part as "...".  Your options are:

	* GET .../<gcl-name>/<recno>
		Returns a JSON object with three fields: gcl_name,
		message_number, and value.  Value will have 8-bit
		characters and those that would break JSON syntax
		encoded as %XX, where XX is the hex code for the
		byte.
	* POST .../<gcl-name>
		Adds a new message to the given <gcl-name>.  The
		value is a JSON object which must at least have a
		"value" field, which must be encoded as a string.
		The return value includes the message number in
		the "msgno" field.
	* POST ...
		Creates a new GCL.  The return value will include
		the name.

	You can do GETs from inside a browser such as Firefox, but not
	POSTs.  For this you'll need to create a message to send
	directly to the HTTP server.  For example:

		POST /gdp/v1/gcl/x0_JlrMRD53TaovZ0Mg6LQJzPJYN6tB0tcoSv32UPVk HTTP/1.0
		Host: localhost:8080
		Accept: application/json
		Accept-Language: en-US,en;q=0.5
		Accept-Encoding: gzip, deflate
		DNT: 1
		Connection: keep-alive
		Content-Length: 34

		{
			"value": "test001"
		}

	Some of the headers are probably unnecessary, but I've tested
	this query in particular.

Setting Debug Flags:
	You can turn on debugging output using a command line flag,
	conventionally "-D<pattern>=<level>".  The <pattern> specifies
	which flags should be set and <level> specifies how much
	should be printed; zero indicates no output, and more output
	is added as the values increase.

	By convention <level> is no greater than 127, and values 100
	and above may modify the base behavior of the program (i.e.,
	do more than just printing information).

	Each debug flag has a hierarchical name with (by convention)
	"." as the separator, for example, "gdp.proto" to indicate
	the protocol processing of the GDP.  The "what(1)" program on
	a binary will show you which debug flags are available,
	including a short description.

Changing Parameters:
	If you want to change parameters such as socket numbers or the
	GCL directory you can do so without recompiling.  Create
	a file with "name=value" pairs, one per line.  Set the
	environment variable "APPLICATION_PARAMS" to point at that
	file (use the full pathname).

	Parameters you can change in that file include:

	swarm.gdp.gdpd.addr --- the address of the gdp daemon (used
		by clients.  Defaults to 127.0.0.1:2468.
	swarm.gdp.event.loopdelay --- if the event loop exits for some
		reason, this is the number of microseconds to delay
		before restarting the loop.  Defaults to 100000 (100msec).
	swarm.gdp.event.looptimeout --- the timeout for the event loop;
		this is mostly just to make sure things don't "hang up"
		forever.  Defaults to 30 (seconds).
	swarm.gdp.gcl.dir --- the data directory (e.g., /var/tmp/gcl).
		Daemon.  This should eventually be replaced by service
		discovery.  Defaults to 2468.
	swarm.gdpd.controlport --- the rendezvous port used by the GDP
		daemon.
	swarm.rest.scgiport --- the port number for the SCGI server to
		listen on.  If you change this you'll also have to
		change the lighttpd configuration.  Defaults to 8001.
	swarm.rest.prefix --- the REST prefix (e.g., /gdp/v1/).
	libep.time.accuracy --- the value filled in for the "accuracy"
		field in time structures (defaults to zero).
