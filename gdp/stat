cmd:1:gdp_event.c:341:	switch (req->rpdu->cmd)
cmd:2:gdp_event.c:373:		if (req->rpdu->cmd >= GDP_ACK_MIN && req->rpdu->cmd <= GDP_ACK_MAX)
cmd:3:gdp_event.c:377:			req->stat = _gdp_stat_from_acknak(req->rpdu->cmd);
cmd:4:gdp_event.c:380:		if (req->rpdu->cmd >= GDP_NAK_C_MIN && req->rpdu->cmd <= GDP_NAK_R_MAX)
cmd:5:gdp_event.c:384:			req->stat = _gdp_stat_from_acknak(req->rpdu->cmd);
cmd:6:gdp_event.c:389:				req->rpdu->cmd);
cmd:7:gdp_event.c:403:	gev->datum = gdp_datum_dup(req->rpdu->datum);
cmd:8:gdp_gcl_ops.c:175:	gcl->nrecs = req->rpdu->datum->recno;
cmd:9:gdp_gcl_ops.c:178:	gcl->gclmd = _gdp_gclmd_deserialize(req->rpdu->datum->dbuf);
cmd:10:gdp_gcl_ops.c:452:	gdp_datum_copy(datum, req->rpdu->datum);
cmd:11:gdp_gcl_ops.c:567:	gdp_datum_copy(datum, req->rpdu->datum);
cmd:12:gdp_gcl_ops.c:652:	*gmdp = _gdp_gclmd_deserialize(req->rpdu->datum->dbuf);
cmd:13:gdp_main.c:165:		memcpy(req->rpdu->src, req->cpdu->dst, sizeof req->rpdu->src);
cmd:14:gdp_main.c:166:		memcpy(req->rpdu->dst, req->cpdu->src, sizeof req->rpdu->dst);
cmd:15:gdp_main.c:167:		req->rpdu->rid = req->cpdu->rid;
cmd:16:gdp_main.c:179:	resp = acknak_from_estat(estat, req->rpdu->cmd);
cmd:17:gdp_main.c:188:	if (req->rpdu->datum != NULL)
cmd:18:gdp_main.c:190:		gdp_datum_t *datum = req->rpdu->datum;
cmd:19:gdp_main.c:193:		ep_thr_mutex_lock(&req->rpdu->datum->mutex);
cmd:20:gdp_main.c:210:				gdp_buf_getlength(req->rpdu->datum->dbuf));
cmd:21:gdp_main.c:211:		req->rpdu->cmd = resp;
cmd:22:gdp_main.c:225:	if (req->rpdu->datum != NULL)
cmd:23:gdp_main.c:226:		ep_thr_mutex_unlock(&req->rpdu->datum->mutex);
cmd:24:gdp_main.c:275:				req->rpdu->rid == rpdu->rid &&
cmd:25:gdp_main.c:276:				GDP_NAME_SAME(req->rpdu->src, rpdu->dst) &&
cmd:26:gdp_main.c:277:				GDP_NAME_SAME(req->rpdu->dst, rpdu->src))
cmd:37:gdp_main.c:455:	resp = acknak_from_estat(estat, req->rpdu->cmd);
cmd:38:gdp_main.c:503:	else if (req->rpdu->cmd == GDP_NAK_R_NOROUTE)
cmd:39:gdp_proto.c:259:			req->rpdu == NULL ? "???" : _gdp_proto_cmd_name(req->rpdu->cmd),
cmd:40:gdp_proto.c:295:			gdp_buf_move(user_dbuf, req->rpdu->datum->dbuf,
cmd:41:gdp_proto.c:296:					gdp_buf_getlength(req->rpdu->datum->dbuf));
cmd:42:gdp_proto.c:299:			gdp_buf_free(req->rpdu->datum->dbuf);
cmd:43:gdp_proto.c:300:			req->rpdu->datum->dbuf = user_dbuf;
cmd:44:gdp_proto.c:307:				if (req->rpdu->datum->sig != NULL)
cmd:45:gdp_proto.c:309:					gdp_buf_move(user_sig, req->rpdu->datum->sig,
cmd:46:gdp_proto.c:310:							gdp_buf_getlength(req->rpdu->datum->sig));
cmd:47:gdp_proto.c:313:			if (req->rpdu->datum->sig != NULL)
cmd:48:gdp_proto.c:314:				gdp_buf_free(req->rpdu->datum->sig);
cmd:49:gdp_proto.c:315:			req->rpdu->datum->sig = user_sig;
cmd:50:gdp_proto.c:316:			req->rpdu->datum->siglen = user_sig == NULL
cmd:51:gdp_proto.c:322:			memcpy(req->cpdu->datum, req->rpdu->datum, sizeof *req->cpdu->datum);
cmd:52:gdp_proto.c:325:			req->rpdu->datum->dbuf = NULL;		// but not the user dbuf!
cmd:53:gdp_proto.c:326:			req->rpdu->datum->sig = NULL;		// or the signature!
cmd:54:gdp_proto.c:327:			gdp_datum_free(req->rpdu->datum);
cmd:55:gdp_proto.c:330:			req->rpdu->datum = req->cpdu->datum;
cmd:56:gdp_proto.c:332:			EP_ASSERT(req->rpdu->datum->inuse);
cmd:57:gdp_proto.c:351:	if (req->rpdu->datum == NULL)
cmd:58:gdp_proto.c:358:		estat = GDP_STAT_FROM_ACK(req->rpdu->cmd);
cmd:59:gdp_proto.c:381:		memcpy(gcl->name, req->rpdu->src, sizeof gcl->name);
cmd:60:gdp_proto.c:399:	if (req->gcl != NULL && req->rpdu->datum != NULL)
cmd:61:gdp_proto.c:400:		req->gcl->nrecs = req->rpdu->datum->recno;
cmd:62:gdp_proto.c:413:	EP_ASSERT_ELSE(req->rpdu->datum != NULL, return EP_STAT_ASSERT_ABORT);
cmd:63:gdp_proto.c:419:	if (req->gcl->nrecs < req->rpdu->datum->recno)
cmd:64:gdp_proto.c:420:		req->gcl->nrecs = req->rpdu->datum->recno;
cmd:65:gdp_proto.c:428:		estat = req->gcl->readfilter(req->rpdu->datum, req->gcl->readfpriv);
cmd:66:gdp_proto.c:452:	return GDP_STAT_FROM_C_NAK(req->rpdu->cmd);
cmd:67:gdp_proto.c:460:	return GDP_STAT_FROM_S_NAK(req->rpdu->cmd);
cmd:68:gdp_proto.c:468:	return GDP_STAT_FROM_R_NAK(req->rpdu->cmd);
cmd:69:gdp_proto.c:479:	if (req->gcl != NULL && req->rpdu->datum != NULL)
cmd:70:gdp_proto.c:480:		req->gcl->nrecs = req->rpdu->datum->recno;
cmd:71:gdp_subscr.c:101:	if (req->rpdu->datum != NULL)
cmd:72:gdp_subscr.c:102:		gdp_datum_free(req->rpdu->datum);
cmd:73:gdp_subscr.c:103:	req->rpdu->datum = NULL;
gdp_api.c:674:	req->cpdu->datum->recno = start;
gdp_api.c:675:	req->numrecs = numrecs;
gdp_api.c:713:	memcpy(&req->cpdu->datum->ts, start, sizeof req->cpdu->datum->ts);
gdp_api.c:714:	req->numrecs = numrecs;
gdp_api.c:754:	req->cpdu->datum->recno = start;
gdp_api.c:755:	req->numrecs = numrecs;
gdp_api.c:795:	memcpy(&req->cpdu->datum->ts, start, sizeof req->cpdu->datum->ts);
gdp_api.c:796:	req->numrecs = numrecs;
gdp_event.c:312:	req->sub_cb = cbfunc;
gdp_event.c:313:	req->udata = cbarg;
gdp_event.c:338:	ep_time_now(&req->act_ts);
gdp_event.c:341:	switch (req->rpdu->cmd)
gdp_event.c:355:		req->flags &= ~GDP_REQ_PERSIST;
gdp_event.c:365:		req->flags &= ~GDP_REQ_PERSIST;
gdp_event.c:373:		if (req->rpdu->cmd >= GDP_ACK_MIN && req->rpdu->cmd <= GDP_ACK_MAX)
gdp_event.c:377:			req->stat = _gdp_stat_from_acknak(req->rpdu->cmd);
gdp_event.c:380:		if (req->rpdu->cmd >= GDP_NAK_C_MIN && req->rpdu->cmd <= GDP_NAK_R_MAX)
gdp_event.c:384:			req->stat = _gdp_stat_from_acknak(req->rpdu->cmd);
gdp_event.c:389:				req->rpdu->cmd);
gdp_event.c:399:	gev->gcl = req->gcl;
gdp_event.c:400:	gev->stat = req->stat;
gdp_event.c:401:	gev->udata = req->udata;
gdp_event.c:402:	gev->cb = req->sub_cb;
gdp_event.c:403:	gev->datum = gdp_datum_dup(req->rpdu->datum);
gdp_event.c:406:	if (req->state == GDP_REQ_WAITING)
gdp_event.c:411:		STAILQ_INSERT_TAIL(&req->events, gev, queue);
gdp_gcl_ops.c:108:	gdp_buf_write(req->cpdu->datum->dbuf, gclname, sizeof (gdp_name_t));
gdp_gcl_ops.c:111:	_gdp_gclmd_serialize(gmd, req->cpdu->datum->dbuf);
gdp_gcl_ops.c:175:	gcl->nrecs = req->rpdu->datum->recno;
gdp_gcl_ops.c:178:	gcl->gclmd = _gdp_gclmd_deserialize(req->rpdu->datum->dbuf);
gdp_gcl_ops.c:281:		req->gcl = NULL;		// owned by caller
gdp_gcl_ops.c:341:		if (EP_UT_BITSET(GDP_REQ_CLT_SUBSCR, req->flags))
gdp_gcl_ops.c:404:	// set up for signing (req->md will be updated with data part)
gdp_gcl_ops.c:405:	req->md = gcl->digest;
gdp_gcl_ops.c:419:	gdp_datum_copy(req->cpdu->datum, datum);
gdp_gcl_ops.c:452:	gdp_datum_copy(datum, req->rpdu->datum);
gdp_gcl_ops.c:497:	i = gdp_buf_drain(req->cpdu->datum->dbuf, SIZE_MAX);
gdp_gcl_ops.c:512:		req->state = GDP_REQ_IDLE;
gdp_gcl_ops.c:513:		ep_thr_cond_signal(&req->cond);
gdp_gcl_ops.c:563:	gdp_datum_copy(req->cpdu->datum, datum);
gdp_gcl_ops.c:567:	gdp_datum_copy(datum, req->rpdu->datum);
gdp_gcl_ops.c:611:	req->cpdu->datum->recno = recno;
gdp_gcl_ops.c:616:		req->state = GDP_REQ_IDLE;
gdp_gcl_ops.c:652:	*gmdp = _gdp_gclmd_deserialize(req->rpdu->datum->dbuf);
gdp_gcl_ops.c:740:	gdp_buf_write(req->cpdu->datum->dbuf, req->cpdu->dst, sizeof req->cpdu->dst);
gdp_gcl_ops.c:743:	memcpy(req->cpdu->dst, to_server, sizeof req->cpdu->dst);
gdp_gcl_ops.c:747:	gdp_buf_write(req->cpdu->datum->dbuf, gdp_buf_getptr(datum->dbuf, l), l);
gdp_gcl_ops.c:748:	req->cpdu->datum->recno = datum->recno;
gdp_gcl_ops.c:749:	req->cpdu->datum->ts = datum->ts;
gdp_gcl_ops.c:750:	req->cpdu->datum->sigmdalg = datum->sigmdalg;
gdp_gcl_ops.c:751:	req->cpdu->datum->siglen = datum->siglen;
gdp_gcl_ops.c:752:	if (req->cpdu->datum->sig != NULL)
gdp_gcl_ops.c:753:		gdp_buf_free(req->cpdu->datum->sig);
gdp_gcl_ops.c:754:	req->cpdu->datum->sig = NULL;
gdp_gcl_ops.c:758:		req->cpdu->datum->sig = gdp_buf_new();
gdp_gcl_ops.c:759:		gdp_buf_write(req->cpdu->datum->sig, gdp_buf_getptr(datum->sig, l), l);
gdp_gcl_ops.c:769:	req->cpdu->datum = NULL;			// owned by caller
gdp_gcl_ops.c:776:		req->state = GDP_REQ_IDLE;
gdp_gcl_ops.c:777:		ep_thr_cond_signal(&req->cond);
Binary file gdp_gcl_ops.o matches
gdp_main.c:154:	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);
gdp_main.c:160:		req->rpdu = _gdp_pdu_new();
gdp_main.c:163:	if (req->rpdu != NULL)
gdp_main.c:165:		memcpy(req->rpdu->src, req->cpdu->dst, sizeof req->rpdu->src);
gdp_main.c:166:		memcpy(req->rpdu->dst, req->cpdu->src, sizeof req->rpdu->dst);
gdp_main.c:167:		req->rpdu->rid = req->cpdu->rid;
gdp_main.c:179:	resp = acknak_from_estat(estat, req->rpdu->cmd);
gdp_main.c:188:	if (req->rpdu->datum != NULL)
gdp_main.c:190:		gdp_datum_t *datum = req->rpdu->datum;
gdp_main.c:193:		ep_thr_mutex_lock(&req->rpdu->datum->mutex);
gdp_main.c:206:	if (req->rpdu != NULL)
gdp_main.c:210:				gdp_buf_getlength(req->rpdu->datum->dbuf));
gdp_main.c:211:		req->rpdu->cmd = resp;
gdp_main.c:212:		req->stat = _gdp_pdu_out(req->rpdu, req->chan, NULL);
gdp_main.c:217:	if (req->postproc)
gdp_main.c:220:		(req->postproc)(req);
gdp_main.c:221:		req->postproc = NULL;
gdp_main.c:225:	if (req->rpdu->datum != NULL)
gdp_main.c:226:		ep_thr_mutex_unlock(&req->rpdu->datum->mutex);
gdp_main.c:227:	if (EP_UT_BITSET(GDP_REQ_CORE, req->flags) &&
gdp_main.c:228:			!EP_UT_BITSET(GDP_REQ_PERSIST, req->flags))
gdp_main.c:230:		if (req->gcl != NULL)
gdp_main.c:231:			_gdp_gcl_unlock(req->gcl);
gdp_main.c:236:		if (req->gcl != NULL && EP_UT_BITSET(GCLF_ISLOCKED, req->gcl->flags))
gdp_main.c:237:			_gdp_gcl_unlock(req->gcl);
gdp_main.c:274:		if (req->rpdu != NULL &&
gdp_main.c:275:				req->rpdu->rid == rpdu->rid &&
gdp_main.c:276:				GDP_NAME_SAME(req->rpdu->src, rpdu->dst) &&
gdp_main.c:277:				GDP_NAME_SAME(req->rpdu->dst, rpdu->src))
gdp_main.c:307:**		PDU off the wire and req->cpdu should be the original command
gdp_main.c:309:**		into req->rpdu for processing in _gdp_req_dispatch.
gdp_main.c:348:		EP_ASSERT_ELSE(req->state != GDP_REQ_FREE, return);
gdp_main.c:352:		if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))
gdp_main.c:355:			req->flags &= ~GDP_REQ_ON_GCL_LIST;
gdp_main.c:387:		else if (!EP_ASSERT(req->state != GDP_REQ_FREE))
gdp_main.c:397:		else if (rpdu == req->rpdu)
gdp_main.c:402:				ep_dbg_printf("gdp_pdu_proc_resp(%d): rpdu == req->rpdu\n",
gdp_main.c:412:	if (req->cpdu == NULL)
gdp_main.c:418:		//XXX return here?  with req->pdu == NULL, _gdp_req_dispatch
gdp_main.c:423:		ocmd = req->cpdu->cmd;
gdp_main.c:427:	if (req->rpdu != NULL)
gdp_main.c:432:			ep_dbg_printf("gdp_pdu_proc_resp: req->rpdu already set\n    ");
gdp_main.c:433:			_gdp_pdu_dump(req->rpdu, ep_dbg_getfile());
gdp_main.c:435:		_gdp_pdu_free(req->rpdu);
gdp_main.c:437:	req->rpdu = rpdu;
gdp_main.c:448:	ep_time_now(&req->act_ts);
gdp_main.c:455:	resp = acknak_from_estat(estat, req->rpdu->cmd);
gdp_main.c:472:	if (EP_UT_BITSET(GDP_REQ_ASYNCIO, req->flags))
gdp_main.c:478:		_gdp_pdu_free(req->rpdu);
gdp_main.c:479:		req->rpdu = NULL;
gdp_main.c:481:	else if (req->state == GDP_REQ_WAITING)
gdp_main.c:484:		req->stat = estat;
gdp_main.c:485:		req->flags |= GDP_REQ_DONE;
gdp_main.c:488:		req->flags |= GDP_REQ_ASYNCIO;
gdp_main.c:497:		ep_thr_cond_signal(&req->cond);
gdp_main.c:503:	else if (req->rpdu->cmd == GDP_NAK_R_NOROUTE)
gdp_main.c:516:	if (EP_UT_BITSET(GDP_REQ_CORE, req->flags) &&
gdp_main.c:517:		!EP_UT_BITSET(GDP_REQ_PERSIST, req->flags))
Binary file gdp_main.o matches
gdp_proto.c:84:	if (req->gcl != NULL)
gdp_proto.c:86:		EP_ASSERT(GDP_GCL_ISGOOD(req->gcl));
gdp_proto.c:87:		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);
gdp_proto.c:89:	cmdname = _gdp_proto_cmd_name(req->cpdu->cmd);
gdp_proto.c:94:				req->cpdu->rid,
gdp_proto.c:96:				req->cpdu->cmd,
gdp_proto.c:97:				req->gcl);
gdp_proto.c:101:			_gdp_datum_dump(req->cpdu->datum, ep_dbg_getfile());
gdp_proto.c:104:	EP_ASSERT_ELSE(req->state == GDP_REQ_ACTIVE, return EP_STAT_ASSERT_ABORT);
gdp_proto.c:105:	//EP_ASSERT(ep_thr_mutex_islocked(&req->mutex));
gdp_proto.c:124:				req->cpdu->cmd, retries);
gdp_proto.c:137:		req->state = GDP_REQ_WAITING;
gdp_proto.c:138:		req->flags &= ~GDP_REQ_ASYNCIO;
gdp_proto.c:139:		while (!EP_UT_BITSET(GDP_REQ_DONE, req->flags))
gdp_proto.c:142:			if (req->gcl != NULL)
gdp_proto.c:143:				_gdp_gcl_unlock(req->gcl);
gdp_proto.c:146:			int e = ep_thr_cond_wait(&req->cond, &req->mutex, &abs_to);
gdp_proto.c:148:			if (req->gcl != NULL)
gdp_proto.c:153:				_gdp_gcl_lock(req->gcl);
gdp_proto.c:161:					e, EP_UT_BITSET(GDP_REQ_DONE, req->flags), req->state,
gdp_proto.c:162:					ep_stat_tostr(req->stat, ebuf, sizeof ebuf));
gdp_proto.c:171:		req->state = GDP_REQ_ACTIVE;
gdp_proto.c:174:			estat = req->stat;
gdp_proto.c:183:					EP_UT_BITSET(GDP_REQ_ROUTEFAIL, req->flags))
gdp_proto.c:206:	_gdp_event_trigger_pending(&req->events);
gdp_proto.c:214:				req, req->cpdu->rid, cmdname,
gdp_proto.c:245:**		When called, the ack/nak PDU should be in req->rpdu.
gdp_proto.c:259:			req->rpdu == NULL ? "???" : _gdp_proto_cmd_name(req->rpdu->cmd),
gdp_proto.c:260:			req->cpdu == NULL ? "???" : _gdp_proto_cmd_name(req->cpdu->cmd));
gdp_proto.c:263:	if (req->rpdu == NULL)
gdp_proto.c:267:			ep_dbg_printf("acknak: req->rpdu == NULL\n");
gdp_proto.c:271:	else if (req->rpdu == req->cpdu)
gdp_proto.c:275:			ep_dbg_printf("acknak: req->rpdu == req->cpdu\n");
gdp_proto.c:281:		if (req->cpdu->datum != NULL && reuse_pdu)
gdp_proto.c:287:				_gdp_datum_dump(req->cpdu->datum, ep_dbg_getfile());
gdp_proto.c:291:			gdp_buf_t *user_dbuf = req->cpdu->datum->dbuf;
gdp_proto.c:295:			gdp_buf_move(user_dbuf, req->rpdu->datum->dbuf,
gdp_proto.c:296:					gdp_buf_getlength(req->rpdu->datum->dbuf));
gdp_proto.c:299:			gdp_buf_free(req->rpdu->datum->dbuf);
gdp_proto.c:300:			req->rpdu->datum->dbuf = user_dbuf;
gdp_proto.c:303:			gdp_buf_t *user_sig = req->cpdu->datum->sig;
gdp_proto.c:307:				if (req->rpdu->datum->sig != NULL)
gdp_proto.c:309:					gdp_buf_move(user_sig, req->rpdu->datum->sig,
gdp_proto.c:310:							gdp_buf_getlength(req->rpdu->datum->sig));
gdp_proto.c:313:			if (req->rpdu->datum->sig != NULL)
gdp_proto.c:314:				gdp_buf_free(req->rpdu->datum->sig);
gdp_proto.c:315:			req->rpdu->datum->sig = user_sig;
gdp_proto.c:316:			req->rpdu->datum->siglen = user_sig == NULL
gdp_proto.c:322:			memcpy(req->cpdu->datum, req->rpdu->datum, sizeof *req->cpdu->datum);
gdp_proto.c:325:			req->rpdu->datum->dbuf = NULL;		// but not the user dbuf!
gdp_proto.c:326:			req->rpdu->datum->sig = NULL;		// or the signature!
gdp_proto.c:327:			gdp_datum_free(req->rpdu->datum);
gdp_proto.c:330:			req->rpdu->datum = req->cpdu->datum;
gdp_proto.c:331:			req->cpdu->datum = NULL;
gdp_proto.c:332:			EP_ASSERT(req->rpdu->datum->inuse);
gdp_proto.c:351:	if (req->rpdu->datum == NULL)
gdp_proto.c:358:		estat = GDP_STAT_FROM_ACK(req->rpdu->cmd);
gdp_proto.c:374:	ep_time_now(&req->act_ts);
gdp_proto.c:378:	gcl = req->gcl;
gdp_proto.c:381:		memcpy(gcl->name, req->rpdu->src, sizeof gcl->name);
gdp_proto.c:399:	if (req->gcl != NULL && req->rpdu->datum != NULL)
gdp_proto.c:400:		req->gcl->nrecs = req->rpdu->datum->recno;
gdp_proto.c:411:	EP_ASSERT_ELSE(req->gcl != NULL, return EP_STAT_ASSERT_ABORT);
gdp_proto.c:412:	EP_ASSERT_ELSE(req->rpdu != NULL, return EP_STAT_ASSERT_ABORT);
gdp_proto.c:413:	EP_ASSERT_ELSE(req->rpdu->datum != NULL, return EP_STAT_ASSERT_ABORT);
gdp_proto.c:419:	if (req->gcl->nrecs < req->rpdu->datum->recno)
gdp_proto.c:420:		req->gcl->nrecs = req->rpdu->datum->recno;
gdp_proto.c:423:	if (req->numrecs > 0)
gdp_proto.c:424:		req->numrecs--;
gdp_proto.c:427:	if (req->gcl->readfilter != NULL)
gdp_proto.c:428:		estat = req->gcl->readfilter(req->rpdu->datum, req->gcl->readfpriv);
gdp_proto.c:452:	return GDP_STAT_FROM_C_NAK(req->rpdu->cmd);
gdp_proto.c:460:	return GDP_STAT_FROM_S_NAK(req->rpdu->cmd);
gdp_proto.c:468:	return GDP_STAT_FROM_R_NAK(req->rpdu->cmd);
gdp_proto.c:479:	if (req->gcl != NULL && req->rpdu->datum != NULL)
gdp_proto.c:480:		req->gcl->nrecs = req->rpdu->datum->recno;
gdp_proto.c:836:	if (req->gcl != NULL)
gdp_proto.c:837:		memcpy(pname, req->gcl->pname, sizeof pname);
gdp_proto.c:846:			ep_dbg_printf("(%s)", req->gcl->pname);
gdp_proto.c:847:		if (req->gcl != NULL && ep_dbg_test(Dbg, 70))
gdp_proto.c:848:				ep_dbg_printf(" [gcl->refcnt %d]", req->gcl->refcnt);
gdp_proto.c:873:		else if (req->gcl != NULL && req->gcl->pname[0] != '\0')
gdp_proto.c:874:			ep_dbg_printf("(%s)", req->gcl->pname);
gdp_proto.c:875:		if (req->gcl != NULL && ep_dbg_test(Dbg, 70))
gdp_proto.c:876:			ep_dbg_printf(" [gcl->refcnt %d]", req->gcl->refcnt);
gdp_proto.c:907:	memcpy(req->cpdu->dst, RoutingLayerAddr, sizeof req->cpdu->dst);
gdp_proto.c:911:		estat = func(req->cpdu->datum->dbuf, ctx, cmd);
Binary file gdp_proto.o matches
gdp_req.c:75:	state = req->state;
gdp_req.c:150:		if (!EP_ASSERT(req->state == GDP_REQ_FREE) ||
gdp_req.c:151:			!EP_ASSERT(!EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags)) ||
gdp_req.c:152:			!EP_ASSERT(!EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags)))
gdp_req.c:162:		ep_thr_mutex_init(&req->mutex, EP_THR_MUTEX_DEFAULT);
gdp_req.c:163:		ep_thr_mutex_setorder(&req->mutex, GDP_MUTEX_LORDER_REQ);
gdp_req.c:164:		ep_thr_cond_init(&req->cond);
gdp_req.c:165:		STAILQ_INIT(&req->events);
gdp_req.c:169:	req->state = GDP_REQ_ACTIVE;
gdp_req.c:182:		req->cpdu = pdu;
gdp_req.c:186:		req->rpdu = pdu;
gdp_req.c:188:	req->gcl = gcl;
gdp_req.c:189:	req->stat = EP_STAT_OK;
gdp_req.c:190:	req->flags = flags;
gdp_req.c:191:	req->chan = chan;
gdp_req.c:200:			req->flags |= GDP_REQ_ON_CHAN_LIST;
gdp_req.c:261:			req, req->state, req->gcl);
gdp_req.c:263:	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);
gdp_req.c:264:	if (req->state == GDP_REQ_FREE)
gdp_req.c:271:	if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))
gdp_req.c:273:		ep_thr_mutex_lock(&req->chan->mutex);
gdp_req.c:275:		req->flags &= ~GDP_REQ_ON_CHAN_LIST;
gdp_req.c:276:		ep_thr_mutex_unlock(&req->chan->mutex);
gdp_req.c:280:	if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))
gdp_req.c:282:		EP_ASSERT_ELSE(req->gcl != NULL, return);
gdp_req.c:283:		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);
gdp_req.c:285:		req->flags &= ~GDP_REQ_ON_GCL_LIST;
gdp_req.c:290:	req->gcl = NULL;			//XXX temp to repair build while fixing bug
gdp_req.c:291:	if (req->gcl != NULL && req->gcl->refcnt > 0)
gdp_req.c:292:		_gdp_gcl_decref(&req->gcl);
gdp_req.c:297:		while ((gev = STAILQ_FIRST(&req->events)) != NULL)
gdp_req.c:298:			STAILQ_REMOVE_HEAD(&req->events, queue);
gdp_req.c:302:	if (req->rpdu != NULL && req->rpdu != req->cpdu)
gdp_req.c:303:		_gdp_pdu_free(req->rpdu);
gdp_req.c:304:	if (req->cpdu != NULL)
gdp_req.c:305:		_gdp_pdu_free(req->cpdu);
gdp_req.c:306:	req->rpdu = req->cpdu = NULL;
gdp_req.c:308:	req->state = GDP_REQ_FREE;
gdp_req.c:309:	req->flags = 0;
gdp_req.c:310:	req->md = NULL;
gdp_req.c:311:	req->udata = NULL;
gdp_req.c:350:			req->flags &= ~GDP_REQ_ON_GCL_LIST;
gdp_req.c:384:	ep_thr_mutex_lock(&req->mutex);
gdp_req.c:387:	if (!EP_ASSERT(req->state != GDP_REQ_FREE))
gdp_req.c:395:		ep_thr_mutex_unlock(&req->mutex);
gdp_req.c:405:	ep_thr_mutex_unlock(&req->mutex);
gdp_req.c:428:	gdp_gcl_t *gcl = req->gcl;
gdp_req.c:437:	EP_ASSERT_ELSE(req->state != GDP_REQ_FREE, return EP_STAT_ASSERT_ABORT);
gdp_req.c:439:	req->flags &= ~GDP_REQ_DONE;
gdp_req.c:440:	if (gcl != NULL && !EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))
gdp_req.c:446:		req->flags |= GDP_REQ_ON_GCL_LIST;
gdp_req.c:455:	estat = _gdp_pdu_out(req->cpdu, req->chan, req->md);
gdp_req.c:471:	gdp_gcl_t *gcl = req->gcl;
gdp_req.c:478:	EP_ASSERT_ELSE(req->state != GDP_REQ_FREE, return EP_STAT_ASSERT_ABORT);
gdp_req.c:486:	if (!EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))
gdp_req.c:493:	req->flags &= ~GDP_REQ_ON_GCL_LIST;
gdp_req.c:542:				if (req->cpdu->rid == rid)
gdp_req.c:551:		EP_ASSERT_ELSE(req->state != GDP_REQ_FREE,
gdp_req.c:553:		if (req->state != GDP_REQ_ACTIVE)
gdp_req.c:560:		ep_thr_cond_wait(&req->cond, &req->mutex, NULL);
gdp_req.c:564:		if (!EP_UT_BITSET(GDP_REQ_PERSIST, req->flags))
gdp_req.c:566:			EP_ASSERT(EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags));
gdp_req.c:568:			req->flags &= ~GDP_REQ_ON_GCL_LIST;
gdp_req.c:618:			req->nextrec, req->numrecs, req->chan,
gdp_req.c:619:			req->postproc, req->sub_cb, req->udata,
gdp_req.c:620:			statestr(req), ep_stat_tostr(req->stat, ebuf, sizeof ebuf));
gdp_req.c:622:	ep_time_print(&req->act_ts, fp, EP_TIME_FMT_HUMAN);
gdp_req.c:624:	ep_prflags(req->flags, ReqFlags, fp);
gdp_req.c:626:	_gdp_gcl_dump(req->gcl, fp, detail, indent);
gdp_req.c:627:	if (req->cpdu != NULL)
gdp_req.c:630:		_gdp_pdu_dump(req->cpdu, fp);
gdp_req.c:632:	if (req->rpdu != NULL)
gdp_req.c:635:		_gdp_pdu_dump(req->rpdu, fp);
Binary file gdp_req.o matches
gdp_subscr.c:73:	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);
gdp_subscr.c:74:	EP_ASSERT_ELSE(req->gcl != NULL, return EP_STAT_ASSERT_ABORT);
gdp_subscr.c:75:	EP_ASSERT_ELSE(req->cpdu != NULL, return EP_STAT_ASSERT_ABORT);
gdp_subscr.c:77:	req->state = GDP_REQ_ACTIVE;
gdp_subscr.c:78:	req->cpdu->cmd = GDP_CMD_SUBSCRIBE;
gdp_subscr.c:79:	memcpy(req->cpdu->dst, req->gcl->name, sizeof req->cpdu->dst);
gdp_subscr.c:80:	memcpy(req->cpdu->src, _GdpMyRoutingName, sizeof req->cpdu->src);
gdp_subscr.c:82:	if (req->cpdu->datum == NULL)
gdp_subscr.c:83:		req->cpdu->datum = gdp_datum_new();
gdp_subscr.c:84:	else if (req->cpdu->datum->dbuf != NULL)
gdp_subscr.c:85:		gdp_buf_reset(req->cpdu->datum->dbuf);
gdp_subscr.c:86:	req->cpdu->datum->recno = req->gcl->nrecs + 1;
gdp_subscr.c:87:	gdp_buf_put_uint32(req->cpdu->datum->dbuf, req->numrecs);
gdp_subscr.c:96:				req->gcl == NULL ? "(no gcl)" : req->gcl->pname,
gdp_subscr.c:100:	req->state = GDP_REQ_IDLE;
gdp_subscr.c:101:	if (req->rpdu->datum != NULL)
gdp_subscr.c:102:		gdp_datum_free(req->rpdu->datum);
gdp_subscr.c:103:	req->rpdu->datum = NULL;
gdp_subscr.c:166:				gdp_gcl_t *gcl = req->gcl;
gdp_subscr.c:177:				if (!EP_UT_BITSET(GDP_REQ_CLT_SUBSCR, req->flags))
gdp_subscr.c:181:				else if (ep_time_before(&t_poke, &req->act_ts))
gdp_subscr.c:185:				else if (ep_time_before(&req->act_ts, &t_dead))
gdp_subscr.c:233:	gdp_buf_put_uint32(req->cpdu->datum->dbuf, req->numrecs);
gdp_subscr.c:237:	EP_ASSERT(req->state == GDP_REQ_ACTIVE);
gdp_subscr.c:246:		req->flags |= GDP_REQ_ASYNCIO;
gdp_subscr.c:249:		req->state = GDP_REQ_IDLE;
gdp_subscr.c:250:		if (req->rpdu != NULL)
gdp_subscr.c:251:			_gdp_pdu_free(req->rpdu);
gdp_subscr.c:252:		req->rpdu = NULL;
gdp_subscr.c:253:		if (req->cpdu->datum != NULL)
gdp_subscr.c:254:			gdp_buf_reset(req->cpdu->datum->dbuf);
gdp_subscr.c:255:		ep_thr_cond_signal(&req->cond);
gdp_subscr.c:261:		if (req->cpdu->cmd == GDP_CMD_SUBSCRIBE)
gdp_subscr.c:266:			ep_thr_mutex_lock(&req->chan->mutex);
gdp_subscr.c:267:			if (poke > 0 && !EP_UT_BITSET(GDP_CHAN_HAS_SUB_THR, req->chan->flags))
gdp_subscr.c:270:				req->chan->flags |= GDP_CHAN_HAS_SUB_THR;
gdp_subscr.c:272:			ep_thr_mutex_unlock(&req->chan->mutex);
gdp_subscr.c:275:				int istat = ep_thr_spawn(&req->chan->sub_thr_id,
gdp_subscr.c:276:									subscr_poker_thread, req->chan);
Binary file gdp_subscr.o matches
Binary file libgdp.a matches
Binary file libgdp.so.0.7 matches
