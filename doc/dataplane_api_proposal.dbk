<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Global Data Plane Programmatic API Proposal</title>

    <author>
      <personname>
        <firstname>Eric</firstname>

        <surname>Allman</surname>
      </personname>

      <affiliation>
        <orgname>U.C. Berkeley Swarm Lab</orgname>
      </affiliation>

      <email>eric@cs.berkeley.edu</email>
    </author>

    <releaseinfo>Version 0.2</releaseinfo>

    <pubdate>2014-06-04</pubdate>
  </articleinfo>

  <para>This is a strawman proposal. It is not complete. Note that this does
  not include the in-system representation except where that impacts the API,
  nor does it discuss discovery at this time. It is only about a C-level API
  (in particular, not about a network-protocol level; Ben Zhang and Chang Lan
  have a proposal for that level). We'll need bindings for languages such as
  C++ and Python; I've tried to keep this proposal reasonably consistent with
  that requirement.</para>

  <para>How does AVB fit into this? Need to provide resource requirements on
  creation to be sure. What about opening?</para>

  <para>This is based in part on Palmer Dabbelt's papers "Swarm OS Universal
  Dataplane" <citation>Dab13a</citation> and "What is the Universal Dataplane,
  Anyway?" <citation>Dab13b</citation>. He had two slightly different
  interfaces in those two papers, the first using read, write. watch, provide,
  and request and the second using publish, subscribe, request, and provide.
  Palmer's interface <code>request(query, qos, cost)</code> requests access to
  an aardvark that matches the given <varname>query</varname> given that
  another service can provide the at least requested <varname>QoS</varname>
  for at most the requested <varname>cost</varname>; <code>provide(name, qos,
  cost)</code> asserts that this service is capable of providing access to the
  <varname>name</varname>d aardvark under the constraints of the given
  <varname>qos</varname> and for the provided <varname>cost</varname>.</para>

  <para>I'm also being informed by the Antiquity and OceanStore papers.</para>

  <para><remark>Note: there is code implementing most of this proposal. It
  only operates on a single machine and isn't particularly
  fast.</remark></para>

  <section>
    <title>Concepts</title>

    <formalpara>
      <title>Nexus</title>

      <para>A nexus represents the rendezvous point for communication in the
      data plane. It is not directly tied to either a file or a network
      connection. On creation, a nexus is assigned a name, which is just a
      random UUID [maybe; see discussion]. A nexus is append-only to writers
      (true or false?). Palmer called this an aardvark. <remark>Ken has nixed
      the name nexus, so I'm now calling it USC (Unnameable Swarm Concept).
      However, I haven't changed it in this document or in the
      code.</remark></para>
    </formalpara>
  </section>

  <section>
    <title>API</title>

    <para>For the moment you can access the dataplane in one of two modes:
    synchronous mode (using <function>gdp_nexus_read</function> for reading)
    an asynchronous mode (using <function>gdp_nexus_subscribe</function> for
    reading). To use it in asynchronous mode you must subscribe to any nexuses
    of interest and then call <function>gdp_nexus_evloop</function>.</para>

    <section>
      <title>Data Structures</title>

      <para></para>

      <refentry>
        <refnamediv>
          <refname>tt_interval_t</refname>

          <refpurpose>TrueTime-style interval</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>#include &lt;gdp/gdp_timestamp.h&gt;

typedef struct timespec tt_stamp_t;

typedef struct
{
    tt_stamp_t  stamp;     // center of interval
    long        accuracy;  // clock accuracy in nanoseconds
} tt_interval_t;</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <para><itemizedlist>
              <listitem>
                <para>A <code>struct timespec</code> contains fields
                <varname>tv_sec</varname> (seconds since January 1, 1970) and
                <varname>tv_nsec</varname> (nanoseconds).</para>
              </listitem>

              <listitem>
                <para>The actual time range is the <varname>stamp</varname>
                &plusmn; <varname>accuracy</varname> / 2.</para>
              </listitem>
            </itemizedlist></para>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>nexmsg_t</refname>

          <refpurpose>A nexus message</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <para><programlisting>#include &lt;gdp/gdp_nexus.h&gt;

typedef struct
{
    bool           ts_valid:1;  // set if ts is valid
    tt_interval_t  ts;          // timestamp for this message
    long           msgno;       // the message number
    const void     *data;       // pointer to data
    size_t         len;         // length of data
    (private data omitted)
} nexmsg_t;</programlisting></para>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <para><itemizedlist>
              <listitem>
                <para>It isn't clear that <varname>msgno</varname> should be
                public.</para>
              </listitem>
            </itemizedlist></para>
        </refsect1>
      </refentry>
    </section>

    <section>
      <title>Functions</title>

      <para></para>

      <refentry>
        <refnamediv>
          <refname>gdp_init</refname>

          <refpurpose>Initialize the GDP library</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <para><programlisting>stat = gdp_init(void)</programlisting></para>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Initializes the GDP library.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_create</refname>

          <refpurpose>Create an append-only nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_create(nexus_t *nexus_type, const char *subtype, nexus_d *nexus_desc, &amp;nexdle)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para><varname>nexus_type</varname> has semantics to the data
              plane (TBD). For example, types might be TimestampedStream,
              AvbStream, SimpleArchive.</para>
            </listitem>

            <listitem>
              <para><varname>nexus_subtype</varname> is a string usable by
              applications or higher level libraries. <remark>Is this actually
              useful?</remark></para>
            </listitem>

            <listitem>
              <para><varname>nexus_desc</varname> contains additional
              descriptor information, such as resource requirements. Can be
              <constant>NULL</constant> to take the defaults. Much of this
              will be specific to <varname>nexus_type</varname>, and should
              probably be passed in as a <type>void *</type>. QoS information
              is probably passed in here.</para>
            </listitem>

            <listitem>
              <para>Returns a nexus handle (<varname>nexdle</varname>).</para>
            </listitem>

            <listitem>
              <para>The nexdle is writable (but can it be readable?)</para>
            </listitem>

            <listitem>
              <para>We probably need payment information, and possibly
              charging. See <link linkend="os-charging">discussion</link> in
              next section. Could that be part of the descriptor? That
              wouldn't be symmetric with the rest of the interface.</para>
            </listitem>

            <listitem>
              <para>Palmer did not describe anything that explicitly creates a
              nexus. I think explicit creation is important, but the semantics
              could be automatic creation on first reference.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_open</refname>

          <refpurpose>Open an existing nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_open(name, rw, qos, ?, &amp;nexdle)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Pass in type/subtype? That would make it seem to be part
              of the naming. Alternatively there could be a "requirements"
              parameter that would specify this information as well as QoS
              requirements. This could be useful.</para>
            </listitem>

            <listitem>
              <para>Can handles be R/W or are the only options RO or AO
              (Append Only)? Or for that matter can you update an existing
              nexus (overwrite) by cloning a new version (e.g., using
              CoW)?</para>
            </listitem>

            <listitem>
              <para>Do we have to pass in a permission token? This could be a
              key. If nexuses are named by their public key then this will be
              implicit, but if ACLs are used then the identity (more likely
              some proxy for the identity) will have to be passed in. Some
              applications might even want to have multiple identities based
              on their roles.</para>
            </listitem>

            <listitem>
              <para>It may be useful to pass in a "payment" parameter. See
              discussion below.</para>
            </listitem>

            <listitem>
              <para>Perhaps <varname>qos</varname> should be replaced by a
              descriptor parameter a la
              <function>gdp_nexus_create</function>.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_msg_new</refname>

          <refpurpose>Create a new message</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_msg_new(nexdle, &amp;nexmsg)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Creates a new nexus message. Actually initializes the data
              structure being passed in.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_append</refname>

          <refpurpose>Append a message to a writable nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_append(nexdle, msg)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Does this return before the data is actually committed or
              after? If before it may be hard to correlate errors to appends.
              If after there will probably be performance issues.</para>
            </listitem>

            <listitem>
              <para>Should writes be asynchronous at this level? Could pass in
              a message id which can be returned in something like a
              <function>gdp_nexus_sync()</function> call. Easy to build
              synchronous on top of asynchronous.</para>
            </listitem>

            <listitem>
              <para>Corresponds to Palmer's <code>write</code>
              <citation>Dab13a</citation> and <code>publish(name,
              message)</code> <citation>Dab13b</citation>, where
              <varname>name</varname> is the name of the nexus and
              <varname>message</varname> is the data.</para>
            </listitem>

            <listitem>
              <para>Messages written into a nexus become available to
              <function>gdp_nexus_read</function> and to functions registered
              with <function>gdp_nexus_subscribe</function>.</para>
            </listitem>

            <listitem>
              <para>This definition assumes an octet-stream-based interface.
              If a message-based interface is chosen then this obviously
              changes. The correct abstraction under those assumptions
              probably passes in a message, which is a structure including
              time and location information as well as the data itself. See
              the discussion in the next section.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_read</refname>

          <refpurpose>Read from a readable nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_read(nexdle, offset, &amp;msg, buf, buflen)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Assumes a message-oriented interface. It could just be a
              byte stream interface, but you lose metadata such as
              timestamps.</para>
            </listitem>

            <listitem>
              <para>An OK stat includes the number of octets actually read.
              <remark>Probably passed back in msg, so unneeded
              here.</remark></para>
            </listitem>

            <listitem>
              <para>The <varname>msg</varname> data may be stored in the
              indicated <varname>buf</varname> (to avoid using dynamic memory,
              which would require that messages be explicitly
              released).</para>
            </listitem>

            <listitem>
              <para>The <varname>offset</varname> indicates a message number
              (sequential starting from zero). The value
              <constant>&ndash;1</constant> indicates any new messages.</para>
            </listitem>

            <listitem>
              <para>Very roughly corresponds to Palmer's <code>read</code>
              (reads a named message) and <code>watch</code> (reads the oldest
              message since a specified time) <citation>Dab13a</citation> and
              <code>subscribe(name, query, qos, cost)</code>
              <citation>Dab13b</citation>, where <varname>name</varname> is
              the name of the nexus, <varname>query</varname> is a condition
              that any returned messages must satisfy, <varname>qos</varname>
              is the required quality of service, and <varname>cost</varname>
              is undefined. It isn't clear if these are supposed to be
              iterators or one-time calls.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_watch</refname>

          <refpurpose>Read from a readable nexus, waiting for a
          result</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_watch(nexdle, offset, &amp;msg, buf, buflen, timeout)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <para></para>

          <itemizedlist>
            <listitem>
              <para>Behaves exactly like gdp_nexus_read, but if the message
              doesn't yet exist it waits for it to appear for up to the
              indicated timeout.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_subscribe</refname>

          <refpurpose>Subscribe to a readable nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_subscribe(nexdle, callback, offset, buf, bufsiz, cbdata)
(*callback)(nexdle, msg, cbdata)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Arranges to call <function>callback</function> when a
              message is generated on the <varname>nexdle</varname>.</para>
            </listitem>

            <listitem>
              <para>The <type>void *</type><varname>cbdata</varname> is passed
              through untouched.</para>
            </listitem>

            <listitem>
              <para>The <function>callback</function> is not necessarily
              invoked instantly, and may or may not be called in a separate
              thread.</para>
            </listitem>

            <listitem>
              <para>The <varname>offset</varname> tells when to start the
              subscription. If <constant>0</constant> then all messages in the
              nexus are returned. If <constant>&ndash;1</constant> then only
              messages generated after the subscription are returned. Other
              values indicate a particular index into the existing nexus
              data.</para>
            </listitem>

            <listitem>
              <para>The <varname>buf</varname> and <varname>bufsiz</varname>
              parameters point to a data buffer that will be used to store the
              returned data. When the <function>callback</function> is
              invoked, the <varname>msg</varname> data will be somewhere in
              that buffer (not necessarily at the beginning).</para>
            </listitem>

            <listitem>
              <para>Need a way to unsubscribe.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_unsubscribe</refname>

          <refpurpose>Unsubscribe from a nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_unsubscribe(nexdle, callback, cbdata)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Unsubscribes to the given {nexdle, callback, cbdata}
              tuple.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_evloop</refname>

          <refpurpose>Start the event loop for subscriptions</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_evloop(void)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <para></para>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_close</refname>

          <refpurpose>Close a nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_close(nexdle, ?)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Should this interface say whether to preserve or drop the
              nexus (i.e., is it persistent, or for how long)?</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_getname</refname>

          <refpurpose>Return the name of a nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_getname(nexdle, namebuf)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>Returns the name of the nexus referenced by
              <varname>nexdle</varname> into <varname>namebuf</varname>.
              Assumes that names are a fixed size, otherwise will need a
              buffer length.</para>
            </listitem>

            <listitem>
              <para>May not be necessary if the creator provides the name;
              really only intended after <function>gdp_nexus_create</function>
              so that the name can be shared to other nodes that want to
              <function>gdp_nexus_open</function> it.</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>

      <refentry>
        <refnamediv>
          <refname>gdp_nexus_getstat</refname>

          <refpurpose>Return information about a nexus</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
          <programlisting>stat = gdp_nexus_getstat(nexdle, statbuf)</programlisting>
        </refsynopsisdiv>

        <refsect1>
          <title>Notes</title>

          <itemizedlist>
            <listitem>
              <para>What status is included? Size (or number of
              records/messages), type, subtype, last access, ...</para>
            </listitem>

            <listitem>
              <para>What about type-dependent status information?</para>
            </listitem>

            <listitem>
              <para>Should this take a handle or a name? Or two
              interfaces?</para>
            </listitem>
          </itemizedlist>
        </refsect1>
      </refentry>
    </section>

    <section>
      <title>Compiling and Linking</title>

      <para>The GDP library uses a reduced version of libep and also uses the
      libevent library version 2.1. These will need to be included both during
      compilation and linking.</para>

      <para>At compile time you must use:<programlisting>-I<replaceable>libevent_includes_parent</replaceable> -I<replaceable>libep_includes_parent</replaceable></programlisting>Note
      that these take the parent of the directory containing the include
      files. For example, if the include files for libevent are in
      <filename>/usr/local/include/event2</filename> and the include files for
      libep are in <filename>/usr/local/include/ep</filename> you only need to
      specify the one flag "<code>-I/usr/local/include</code>".</para>

      <para>For linking you must use:<programlisting>-L<replaceable>libevent_libraries</replaceable> -levent -L<replaceable>libep_libraries</replaceable> -lep</programlisting>As
      before, if the libraries for libevent and libep are in the same
      directory you only need a single <code>-L</code> flag.</para>

      <para>Libep is a library that I produced several years ago intended for
      use in sendmail. This uses a stripped down version of that library that
      excludes several things that would not be helpful here. For more details
      of the original (full) library, see <ulink
      url="http://www.neophilic.com/blogs/eric.php/2014/05/12/libep-portable-c-runtime">http://www.neophilic.com/blogs/eric.php/2014/05/12/libep-portable-c-runtime</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Open Questions</title>

    <para></para>

    <section>
      <title xml:id="oq-access">Access Control</title>

      <para>Do this using Access Control Lists (so each user/app has a
      keypair) or by passing public/private keys around (so each nexus has a
      private keypair). The latter makes revocation impossible (even for write
      access), so I prefer the ACL approach. Third way?</para>

      <para>Revocation? Deep vs. Shallow. Deep = take away permissions that
      have already been given. Shallow = you can only prevent an accessor from
      getting to new versions. Argument: deep revocation is hard to do from a
      technical perspective and ultimately futile (someone might have taken a
      photo of a screen while they still had access), but is still what people
      are used to (Unix and SQL permissions work this way). Shallow is all
      that can really be guaranteed. Also, anything involving Certificate
      Revocation Lists (CRLs) is doomed to failure. This implies that ACLs are
      the correct direction.</para>

      <para>ACLs get us into the question of identity. Pretending that a
      keypair represents an identity doesn't work in the real world where bad
      players simply create new "identities" (keypairs) when an old identity
      has become untrusted. See the extensive work in email sender reputation.
      However, when a bad player creates a new identity/keypair they do not
      get access to any previous grants, so this may be sufficient.</para>
    </section>

    <section>
      <title xml:id="oq-naming">Naming</title>

      <para>If each nexus has a private keypair, then the public key is
      sufficient to name the entity. If not, then assigning a nexus a GUID on
      creation seems like the best approach. Having the user assign a name
      seems like a non-starter, if only because of the possibility of
      conflicts.</para>

      <para>There will probably be some need for external naming, e.g., some
      overlay directory structure. That might be a different
      nexus_type.</para>

      <para>This seems like an open research topic.</para>
    </section>

    <section>
      <title xml:id="oq-charging">Orphans, Expiration, Charging, and
      Accounting</title>

      <para>If a nexus isn't linked into a directory structure and everyone
      forgets its name then it will live forever (or until it expires). This
      could be quite common if a nexus is temporary, that is, not a candidate
      for long-term archival.</para>

      <para>Expiration could be an issue without some sort of charging, which
      implies accounting.</para>

      <para>Charging and accounting will affect the API. It seems like on
      nexus creation the creator needs to offer payment for both carrying and
      storing the data. This payment would presumably accrue to the actors
      providing the actual service. Payment for storage might be limited time
      or indefinite time (i.e., it would be an endowment).</para>

      <para>The creator could also specify a cost for any potential consumer
      in order to access the nexus. Such payments would accrue to the creator
      of the nexus, and might be used to fund continued access, i.e. it could
      be rolled back into the endowment. This would lean toward making
      less-used data disappear: appealing in some ways, but anathema to
      librarians and historians.</para>

      <para>As for API effects, it seems that nexus creation needs to include
      a payment for initial service, a cost for access, and an account into
      which to deposit any consumer payments. Accessing a nexus only requires
      an offered payment (which is probably best viewed as a bid rather than a
      payment, thus allowing multiple providers to compete for access).</para>

      <para>Note that none of this is dependent on the form of payment. It
      does however assume that there is a mutually agreed upon form of
      payment, i.e., a universal currency.</para>
    </section>

    <section>
      <title xml:id="oq-content">Nexus Content &mdash; Message vs. Byte
      Stream, Timestamping</title>

      <para>Is the data inside a nexus a Unix-style stream of bytes or a
      record/message abstraction?</para>

      <para>Is timestamping something that should be supported at this level
      or higher? Timestamping will require a message-based abstraction. Note
      that there are really two timestamps: a "commit" timestamp that
      indicates official entry into the dataplane and a "sample" timestamp
      that is inserted as close to the sensor as possible and is arguably an
      application-level concern.</para>
    </section>

    <section>
      <title xml:id="oq-write">Nexus Write Semantics</title>

      <para>Is there a way to overwrite a nexus in place (even if that means
      create a new version using copy-on-write)?</para>

      <para>If everything is actually append-only then databases become more
      interesting, but not impossible.</para>

      <para>This will impact the ease of providing Posix file semantics to
      applications.</para>

      <para>ANSWER: No overwrite.</para>
    </section>

    <section>
      <title xml:id="oq-qos">Quality of Service</title>

      <para>Is Quality of Service specified on a particular nexus, a
      particular open instance of a nexus, or between a pair of
      endpoints?</para>

      <para>What does QoS actually mean? For example, in a live media stream
      it probably means the resolution of the data stream (which determines
      real-time bandwidth), latency, and possibly jitter, but after that
      stream is stored the QoS will be resolution (as before), delivery
      bandwidth (how quickly you can download the video, for example), and
      possibly jitter of the network connection (that is, how even the data
      flow will be). Delivery bandwidth depends on the entire path between the
      data source and the data sync, and may be higher or lower than the
      bandwidth required to send a real-time version of the stream &mdash; for
      example, over a slow network link.</para>
    </section>
  </section>

  <appendix>
    <title>References</title>

    <bibliolist>
      <biblioentry>
        <abbrev>Dab13a</abbrev>

        <author>
          <personname>
            <firstname>Palmer</firstname>

            <surname>Dabbelt</surname>
          </personname>
        </author>

        <title>Swarm OS Universal Dataplane</title>

        <date>August 22, 2013</date>
      </biblioentry>

      <biblioentry>
        <abbrev>Dab13b</abbrev>

        <author>
          <personname>
            <firstname>Palmer</firstname>

            <surname>Dabbelt</surname>
          </personname>
        </author>

        <title>What is the Universal Dataplane, Anyway?</title>

        <date>September 17, 2013</date>
      </biblioentry>
    </bibliolist>
  </appendix>
</article>
