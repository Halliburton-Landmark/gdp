<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Global Data Plane Interface Details (And Thoughts on
    Implementation)</title>

    <subtitle>Straw Man Version 1</subtitle>

    <author>
      <firstname>Eric</firstname>

      <surname>Allman</surname>

      <affiliation>
        <orgname>U.C. Berkeley Swarm Lab</orgname>
      </affiliation>

      <email>eric@cs.berkeley.edu</email>
    </author>

    <pubdate>2014-06-05</pubdate>

    <releaseinfo>Incomplete Draft 3</releaseinfo>
  </articleinfo>

  <para>These are my thoughts on a possible model for the Global Data Plane
  interface and to a lesser extent the implementation. Much of this will not
  be in the initial implementation, but I want to start thinking about how it
  works now.</para>

  <para>A USC is named with a 256-bit identifier that might be either a GUID
  or a hash of the contents; the important point is that it be unique and, for
  performance reasons, reasonably evenly distributed (sequential integers
  would be a very bad idea indeed).</para>

  <section>
    <title>GDP Daemons</title>

    <para>The GDP implementation will be broken up into a collection of
    cooperating daemons.</para>

    <orderedlist>
      <listitem>
        <para>The GDP Access Daemon (GAD) is the central entry point for
        clients into the system and as such has to be discoverable, probably
        either by SLP or DNS-SD. It&rsquor;s main job is to help clients
        bootstrap their interaction with the GDP.</para>
      </listitem>

      <listitem>
        <para>The Location/Replication Daemon (LRD) controls how data is
        distributed among the various host nodes. It doesn&rsquor;t need to
        have the entire state of the world, but it does need to know how to
        communicate with other LRDs and with the Data Daemon (below). It also
        understands about Quality of Service and can, for example, select a
        path that supports AVB if that is the only protocol that works &mdash;
        or return a failure to the client telling them that the requested QoS
        is not possible.</para>

        <note>
          <para>For a first implementation this will be implemented using a
          key-value store that maps USC IDs to physical location (a TCP host
          and port number), without concern for migration and replication.
          Nitesh will probably implement this since he needs it for his
          micropayment work.</para>
        </note>
      </listitem>

      <listitem>
        <para>The Data Daemon (DD) is the performance-critical piece that
        needs to talk with clients and other Data Daemons. It is the meat of
        the GDP. This is the piece that most likely needs to be implemented in
        C. Its raison d&rsquor;&ecirc;tre is solely to shovel data from where
        it is to where it needs to be, but someone else (the LRD) decides
        where that is. It can be thought of as pure implementation; policy is
        handled elsewhere.</para>

        <note>
          <para>Eric already has a draft implemention of this code that runs
          on one host only. It may be useful as a basis.</para>
        </note>
      </listitem>

      <listitem>
        <para>The RESTful Interface Daemon (RID) translates REST calls into
        GDP calls. This isn't actually part of the GDP proper, but it will be
        the primary access path for many applications.</para>
      </listitem>

      <listitem>
        <para>The GDP Startup Daemon (GSD). It is what gets started up,
        creating the other daemons and monitoring them. This will certainly be
        desirable during development and should probably be continued into
        deployment.</para>
      </listitem>

      <listitem>
        <para>(Maybe) The Economics Daemon (ED). This manages micropayments as
        necessary. Strictly speaking it is not part of the Data Plane proper.
        This is Nitesh's domain.</para>
      </listitem>
    </orderedlist>

    <note>
      <para>The full implementation will also require key management, resource
      brokerage, and more. These are not part of the GDP, but will be services
      that the GDP will have to use.</para>
    </note>
  </section>

  <section>
    <title>Network Protocol</title>

    <para>Ideally there will be a single network protocol that can work on all
    connections, but this isn&rsquor;t critical to operation. The following
    protocol is designed for client to DD (and probably DD to DD)
    communication.</para>

    <note>
      <para>This is totally off the top of my head.</para>
    </note>

    <para>Network packets are binary for performance. They are laid out
    as:</para>

    <informaltable frame="box" rules="all">
      <col valign="top" width="1*" />

      <col valign="top" width="2*" />

      <col valign="top" width="12*" />

      <thead>
        <tr align="center">
          <th>Octets</th>

          <th>Name</th>

          <th>Comments</th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>1</td>

          <td>command</td>

          <td>e.g., write, read, open, close; also used for status: success,
          failure</td>
        </tr>

        <tr>
          <td>3</td>

          <td>sequence</td>

          <td>A sequence number used to correlate requests and replies. The
          initiator chooses an unused value; the replier repeats that value
          back in the response. There is no requirement that this be
          monotonically increasing, or even that it be unique &mdash; it is
          purely for the convenience of the client.</td>
        </tr>

        <tr>
          <td>32</td>

          <td>usc_id</td>

          <td>The name of the USC of interest</td>
        </tr>

        <tr>
          <td>4</td>

          <td>recno</td>

          <td>The record number (from 0 for each USC). If negative it will be
          interpreted as being &ldquo;from the end&rdquor;, so &ndash;1
          returns the last (most recent) record. Responses will always have an
          absolute record number.</td>
        </tr>

        <tr>
          <td>16</td>

          <td>timestamp</td>

          <td>The GDP commit timestamp for this record; see below for more
          information.</td>
        </tr>

        <tr>
          <td>4</td>

          <td>length</td>

          <td>The length of the data portion in octets.</td>
        </tr>

        <tr>
          <td>N</td>

          <td>data</td>

          <td>The data itself. The actual field is padded to the next higher
          four bytes; for example, if length is 5 then 8 bytes are transmitted
          but only five bytes are relevant.</td>
        </tr>
      </tbody>
    </informaltable>

    <para>Commands:</para>

    <informaltable frame="box" rules="all">
      <col valign="top" width="1*" />

      <col valign="top" width="2*" />

      <col valign="top" width="12*" />

      <thead>
        <tr align="center">
          <th>Cmd</th>

          <th>Name</th>

          <th>Comments</th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>0</td>

          <td>Idle</td>

          <td>Used for keepalives (or maybe unused?)</td>
        </tr>

        <tr>
          <td>1</td>

          <td>Hello</td>

          <td>Initial startup handshake/authentication (details TBD)</td>
        </tr>

        <tr>
          <td>2</td>

          <td>Move</td>

          <td>Reserved for mobile nodes</td>
        </tr>

        <tr>
          <td></td>

          <td></td>

          <td></td>
        </tr>

        <tr>
          <td>8</td>

          <td>Create</td>

          <td>Creates a USC; the response returns the USC_id</td>
        </tr>

        <tr>
          <td>9</td>

          <td>Open_A</td>

          <td>Open an existing USC for append; the response repeats the
          USC_id</td>
        </tr>

        <tr>
          <td>10</td>

          <td>Open_R</td>

          <td>Open an existing USC for read; the response repeats the
          USC_id</td>
        </tr>

        <tr>
          <td>11</td>

          <td>Close</td>

          <td>Close a USC (that is, declare lack of interest)</td>
        </tr>

        <tr>
          <td></td>

          <td></td>

          <td></td>
        </tr>

        <tr>
          <td>16</td>

          <td>Read</td>

          <td>Read a given record number from a USC. The response includes the
          USC_id, the recno, and the timestamp as well as the data</td>
        </tr>

        <tr>
          <td>17</td>

          <td>Append</td>

          <td>Append to a given USC. The response includes the USC_id, the
          newly assigned recno, and the newly assigned timestamp. Question:
          should internal communications allow a timestamp to be passed?
          Probably.</td>
        </tr>

        <tr>
          <td>18</td>

          <td>Subscribe</td>

          <td>Tell the DD that you are interesting in getting spontaneous
          messages when a message is appended to a given USC_id.</td>
        </tr>

        <tr>
          <td>19</td>

          <td>Unsubscribe</td>

          <td>Could this just use Close instead?</td>
        </tr>

        <tr>
          <td></td>

          <td></td>

          <td></td>
        </tr>

        <tr>
          <td>192</td>

          <td>Ack/Data</td>

          <td>Successful response. Includes data if appropriate (e.g., in
          response to a read). If this is a spontaneous response resulting
          from a Subscribe, the sequence is set to the same value as the
          Subscribe message and the data is returned.</td>
        </tr>

        <tr>
          <td>193</td>

          <td>Nack/Error</td>

          <td>Failure response. Error detail is returned in the recno and/or
          data field (TBD)</td>
        </tr>

        <tr>
          <td>194</td>

          <td>Continue</td>

          <td>Intermediate response. For example, used during authentication
          exchanges to say &ldquo;proceed to next phase&rdquor;</td>
        </tr>

        <tr>
          <td></td>

          <td></td>

          <td></td>
        </tr>

        <tr>
          <td>255</td>

          <td>Reserved</td>

          <td></td>
        </tr>

        <tr>
          <td></td>

          <td></td>

          <td></td>
        </tr>
      </tbody>
    </informaltable>

    <para>Strictly speaking there is no need for the
    Open_<replaceable>X</replaceable> calls. It&rsquor;s my hunch that this
    will improve efficiency by allowing the system knowledge of intent. Close
    is necessary even without Open to flush subscriptions; it may also be
    useful for forcing commits. A spontaneously closed connection implies a
    Close.</para>
  </section>

  <section>
    <title>On-Disk Representation</title>

    <para>The actual representation of a USC on disk is likely to depend a lot
    on the underlying structures, so this is pretty much a shot in the dark.
    It&rsquor;s designed for representation in a regular Unix file.</para>

    <para>An on-disk representation of a USC has three parts: a USC Header
    (probably a fixed length area), an index (for random access), and the data
    itself. It is intended that the index can be rebuilt from the data.</para>

    <para>The USC header consists of:</para>

    <informaltable frame="box" rules="all">
      <col valign="top" width="1*" />

      <col valign="top" width="2*" />

      <col valign="top" width="12*" />

      <thead>
        <tr align="center">
          <th>Octets</th>

          <th>Name</th>

          <th>Comments</th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>4/8?</td>

          <td>usc_magic</td>

          <td>A magic number used to ensure that this really is a USC; I
          recommend the ASCII representation of &ldquo;gdp-USC&rdquor; or
          something similarly understandable.</td>
        </tr>

        <tr>
          <td>4</td>

          <td>usc_version</td>

          <td>A version number, useful for back compatibility.</td>
        </tr>

        <tr>
          <td>4</td>

          <td>header_length</td>

          <td>The length of the header.</td>
        </tr>

        <tr>
          <td>?</td>

          <td></td>

          <td>Probably other fields such as pointers to the index.</td>
        </tr>

        <tr>
          <td>var</td>

          <td>content_type</td>

          <td>The type of the contents. This is used solely for
          client-to-client convenience, and is not interpreted in any way by
          the Data Plane.</td>
        </tr>
      </tbody>
    </informaltable>

    <para>The structure of the index is TBD; I believe there is discussion of
    that in the Oceanstore paper. For a first pass implementation there might
    be an in-memory index only which is rebuilt when a USC is opened. This
    would make startup slow, but as long as USCes are small it should be
    acceptable for a first pass prototype.</para>

    <para>The data records consist of:</para>

    <informaltable frame="box" rules="all">
      <col valign="top" width="1*" />

      <col valign="top" width="2*" />

      <col valign="top" width="12*" />

      <thead>
        <tr align="center">
          <th>Octets</th>

          <th>Name</th>

          <th>Comments</th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>4</td>

          <td>recno</td>

          <td>The sequence number of this record.</td>
        </tr>

        <tr>
          <td>16</td>

          <td>timestamp</td>

          <td>The USC commit timestamp for this record.</td>
        </tr>

        <tr>
          <td>4</td>

          <td>length</td>

          <td>The length of the data.</td>
        </tr>

        <tr>
          <td>N</td>

          <td>data</td>

          <td>The data itself. The actual field is padded to the next higher
          four bytes; for example, if length is 5 then 8 bytes are transmitted
          but only five bytes are relevant.</td>
        </tr>

        <tr>
          <td></td>

          <td></td>

          <td></td>
        </tr>
      </tbody>
    </informaltable>

    <para>It is possible that more information will be needed in the future;
    if so, the USC_version number should be bumped. For example we might
    decide to include a hash of the data in the record header.</para>
  </section>

  <section>
    <title>Open Questions</title>

    <itemizedlist>
      <listitem>
        <para>Is passing AVB data through the DD before it goes into the
        network going to give us adequate performance? And do we have any
        choice?</para>
      </listitem>

      <listitem>
        <para>Does including QoS with the LD make sense, or should there be a
        separate Quality Daemon (QD) dedicated to this? If so, how do they
        communicate?</para>
      </listitem>
    </itemizedlist>
  </section>
</article>
