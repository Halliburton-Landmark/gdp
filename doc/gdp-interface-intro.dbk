<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <title>Global Data Plane Interface Introduction</title>

  <subtitle>Straw Man Version 1</subtitle>

  <articleinfo>
    <author>
      <firstname>Eric</firstname>

      <surname>Allman</surname>

      <affiliation>
        <orgname>U.C. Berkeley Swarm Lab</orgname>
      </affiliation>

      <email>eric@cs.berkeley.edu</email>
    </author>

    <releaseinfo>Incomplete Draft 2</releaseinfo>

    <pubdate>2014-06-04</pubdate>
  </articleinfo>

  <para>These are my thoughts on a possible model for the Global Data Plane
  interface and to a lesser extent the implementation. Much of this will not
  be in the initial implementation, but I want to start thinking about how it
  works now.</para>

  <para>There is an important concept in the Global Data Plane which has so
  far defied attempts to give it a name. It is the thing applications and
  services use to communicate and store data. Some people are calling it a
  channel, and some people are calling a log, and others are say that
  It&rsquor;s not a log because it might be a network connection, and
  it&rsquor;s not a channel because it might be a log. It&rsquor;s existence
  is potentially distributed throughout the swarm (that is, one of these
  things, whatever they are, can be accessed from anywhere in the swarm
  assuming you have the correct permissions). I think of it as a rendezvous
  point and was calling it a nexus, but someone else objected because Google
  has a line of mobile devices under that name. Palmer called it an
  &ldquo;aardvark&rdquor; because at least everyone agreed that was an awful
  name. For the purposes of this document I&rsquor;m going to call it a
  &ldquo;USC&rdquor;.</para>

  <para>A USC is named with a 128-bit Location Independent Name that might be
  either a GUID or a hash of the contents; the important point is that it be
  unique and, for performance reasons, reasonably evenly distributed
  (sequential integers would be a very bad idea indeed). We might consider
  using 160 bit names (the size of a SHA1 hash) or even 256-bit names (the
  size of a SHA256); that seems to be the direction the crypto community is
  going.</para>

  <para>My assumption is that there will be a single address space for all
  addressable objects in the Swarm, including USCs, services, perhaps even
  individual sensors.</para>

  <section>
    <title>Overall GDP Model</title>

    <para>All entities known to the GDP are addressed with a Location
    Independent Name as described above. With such a name and an ingress to
    the GDP a client can access anything, local or remove, without having to
    know its physical location.</para>

    <para>In this paper I'm defining the core GDP as the entity that does the
    following:</para>

    <itemizedlist>
      <listitem>
        <para>Knows how to move, store, and retrieve data within Quality of
        Service requirements.</para>
      </listitem>

      <listitem>
        <para>Knows how to how to find a path (route) to a Location Indepedent
        Name. This might represent a service as well as a USC.</para>
      </listitem>
    </itemizedlist>

    <para>This is intentionally a minimalistic set of functions. In addition,
    there are functions that assist the core GDP, and might be considered to
    be part of the GDP itself. Hence, they might be considered to be part of
    the "extended GDP".</para>

    <itemizedlist>
      <listitem>
        <para>A GDP Ingress Agent. This is primarily used to bootstrap contact
        with the GDP.</para>
      </listitem>

      <listitem>
        <para>A distributed Location/Replication Service that determines where
        data should be replicated and/or moved. It is one of the few non-core
        pieces that understands physical location.</para>
      </listitem>

      <listitem>
        <para>An Authorization Service that that determines which agents
        (clients, services, etc.) are permitted to access what data. It can
        issue session keys to approved agents that serve both to encrypt and
        authorize an interaction.</para>
      </listitem>

      <listitem>
        <para>A RESTful interface that layers a REST-style interface onto the
        services described here. See below for more information.</para>
      </listitem>

      <listitem>
        <para><remark>(MORE?)</remark></para>
      </listitem>
    </itemizedlist>

    <para>In addition there are other services that the GDP relies on but
    which are definitely not part of the GDP itself. Some examples of these
    are:</para>

    <itemizedlist>
      <listitem>
        <para>Resource Brokers, which mediate access to shared
        resources.</para>
      </listitem>

      <listitem>
        <para>An Authentication Agent. The details of this are still to be
        determined.</para>
      </listitem>
    </itemizedlist>

    <para>Data in the GDP is modeled as a series of records. These records
    have a GDP commit timestamp but are otherwise opaque blobs; in fact, the
    assumption is that the data are encrypted before presentation to the GDP.
    Applications may impose structure on the (decrypted) data, including
    metadata such as location and collection timestamp information (as
    distinct from commit timestamps), but this is not managed by the GDP
    itself.</para>
  </section>

  <section>
    <title>The Basic GDP Interface</title>

    <para>It's probably easiest to explain the interface by giving an example.
    In this case an application or service (the client) wants to make data
    available to readers, either in current time or at a future time.</para>

    <orderedlist>
      <listitem>
        <para>The client locates a GDP Ingress Agent. To do this it has to
        have some form of discovery, the details of which haven't been worked
        out, but it will probably be similar to existing systems like Service
        Location Protocol [RFC2608, RFC3224] or DNS-SD [RFC6762, RFC6763],
        both of which are based on multicast. See below for the rationale
        behind the Ingress Agent.</para>
      </listitem>

      <listitem>
        <para>The client asks the GDP Ingress Agent to initiate a connection
        with an Authentication Agent. It isn't clear whether the Ingress Agent
        forwards requests to the Authentication Agent or passes a physical
        address of an Authentication Agent to the client which will then
        authenticate directly. Since the location of Authentication Agents are
        not secret, this exchange does not need to be encrypted. However,
        since the upcoming authentication dialog does need to be encrypted,
        the Ingress Agent might produce a one-time session key and exchange it
        with the client using an algorithm such as Diffie-Hellman.</para>
      </listitem>

      <listitem>
        <para>If the client is contacting an Authentication Agent directly
        they start by producing a one-time session key and starting encryption
        (not necessary if the dialog is being forwarded through an Ingress
        Agent). The client does an authentication dialog with the
        Authentication Agent. If the client represents an end user this might
        be based on conventional techniques such as passwords or PINs, but if
        the client is (for example) a service it might do so by proving that
        it owns a secret key.</para>
      </listitem>

      <listitem>
        <para>The Authentication Agent produces a signed ticket verifying the
        fact that the authentication has succeeded and passes it back to the
        client.</para>
      </listitem>

      <listitem>
        <para>The client informs the Ingress Agent what it wants to do, in
        this case, to create a USC with some specified Quality of Service
        guarantees. Other possible options might be to read an USC, append to
        an existing USC, or access a swarm service. This step is really a
        negotiation, since the client might be willing to trade off one sort
        of resource for another. The Ingress Agent verifies that the client
        has permission to perform this operation, probably by contacting an
        Authorization Agent and possibly checking to make sure the client has
        sufficient funds in a micropayment account to continue.</para>
      </listitem>

      <listitem>
        <para>Assuming that the authorization succeeds, the Ingress Agent
        first does any setup necessary to prime the USC (e.g., "create"
        operations, allocating resources for an AVB/TSN connection, etc. It
        then produces a signed authorization ticket that permits only that
        operation and shares it with the client, together with the physical
        address(es) of one or more GDP Data Agent nodes that can satisfy the
        request.</para>
      </listitem>

      <listitem>
        <para>The client contacts one of the specified GDP Data Agents
        directly, presents the authorization ticket, and begins the
        exchange.</para>
      </listitem>

      <listitem>
        <para>When the client is complete it tells the Data Agent to close the
        connection. The Data Agent then informs the Ingress Agent, which
        releases any resources. The Data Agent does this rather than the
        client so that if the client unexpectedly disconnects the resources
        will still be released.</para>
      </listitem>
    </orderedlist>

    <para>If the connection is broken, e.g., because a Data Agent has
    withdrawn, the client negotiates with the Ingress Agent to find a new
    physical connection with another Data Agent.</para>

    <para>The Ingress Agent clearly does a lot of work that is difficult to
    characterize. The primary reason to encapsulate these functions in the GDP
    Ingress Agent to offload the client, which may have limited processing
    capabilities (for example, an Arduino ethernet shield only supports a
    small number of simultaneous connections). It's "one stop shopping" for
    clients of the GDP.</para>
  </section>

  <section>
    <title>The RESTful GDP Interface</title>

    <para>Since a lot of applications will want a more "user friendly"
    interface, we will provide a RESTful interface on top of the GDP itself.
    Note that this is not part of the GDP proper, since it understands some
    structure in the data, and will not be as high performance as the native
    GDP interface, e.g., for streaming media. The details of this interface
    are <remark>to be determined</remark>. Note that this interface will have
    to know how to encrypt data that it passes to the GDP in order to satisify
    the "no unencrypted data" policy.</para>

    <para>See <citation>RESTful Interface for the Global Data Plane</citation>
    for details.</para>
  </section>

  <section>
    <title>Open Questions</title>

    <itemizedlist>
      <listitem>
        <para>Is passing high performance data streams such as AVB through the
        GDP Data Agent before it goes into the network going to give us
        adequate performance? And do we have any choice?</para>
      </listitem>

      <listitem>
        <para>Is there a sufficiently common structure that we can actually
        implement a general purpose REST interface? It may be that simple
        key-value pairs (where values are primitive types, arrays, and
        structured objects) will be sufficient.</para>
      </listitem>
    </itemizedlist>
  </section>
</article>
